{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar gameField = document.body.querySelector(\".game-field\");\nvar startButton = document.body.querySelector(\".button\", \".start\");\nvar startMessage = document.body.querySelector(\".message-start\");\nvar scoreMessage = document.body.querySelector(\".game-score\");\nvar winMessage = document.body.querySelector(\".message-win\");\nvar loseMessage = document.body.querySelector(\".message-lose\");\nvar size = 4;\nvar score = 0;\nvar board = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\nfunction createRandomCell() {\n    var randomRow = getRandomInt(size);\n    var randomCell = getRandomInt(size);\n    var probability = 10;\n    var value = getRandomInt(100) <= probability ? 4 : 2;\n    if (board[randomRow][randomCell] === 0) board[randomRow][randomCell] = value;\n    else createRandomCell();\n}\nfunction reset() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    winMessage.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n}\nfunction isWin() {\n    if (board.some(function(arr) {\n        return arr.some(function(cell) {\n            return cell === 2048;\n        });\n    })) winMessage.classList.remove(\"hidden\");\n}\nfunction isLose() {\n    if (haveSpace()) return false;\n    for(var r = 0; r < size; r++)for(var c = 0; c < size - 1; c++){\n        if (board[r][c] === board[r][c + 1]) return false;\n    }\n    for(var c1 = 0; c1 < size; c1++)for(var r1 = 0; r1 < size - 1; r1++){\n        if (board[r1][c1] === board[r1 + 1][c1]) return false;\n    }\n    return true;\n}\nfunction lose() {\n    loseMessage.classList.remove(\"hidden\");\n}\nfunction haveSpace() {\n    for(var r = 0; r < size; r++){\n        if (board[r].includes(0)) return true;\n    }\n    return false;\n}\nfunction renderCells() {\n    for(var row = 0; row < size; row++)for(var cell = 0; cell < size; cell++){\n        var currentCell = gameField.rows[row].cells[cell];\n        currentCell.innerHTML = \"\";\n        currentCell.className = \"field-cell\";\n        if (board[row][cell] > 0) {\n            currentCell.innerHTML = \"\".concat(board[row][cell]);\n            currentCell.classList.add(\"field-cell--\".concat(board[row][cell]));\n        }\n    }\n}\nfunction slide(array) {\n    var newArray = array.filter(function(element) {\n        return element !== 0;\n    });\n    for(var i = 0; i < newArray.length - 1; i++)if (newArray[i] === newArray[i + 1]) {\n        newArray[i] *= 2;\n        newArray[i + 1] = 0;\n        score += newArray[i];\n    }\n    var filteredArray = newArray.filter(function(element) {\n        return element !== 0;\n    });\n    var zeros = Array(array.length - filteredArray.length).fill(0);\n    var finalArray = filteredArray.concat(zeros);\n    return finalArray;\n}\nstartButton.addEventListener(\"click\", function() {\n    reset();\n    startMessage.classList.add(\"hidden\");\n    startButton.classList.replace(\"start\", \"restart\");\n    startButton.innerHTML = \"restart\";\n    createRandomCell();\n    createRandomCell();\n    renderCells();\n});\nfunction hasChanged(cur, prev) {\n    for(var row = 0; row < size; row++)for(var col = 0; col < size; col++){\n        if (cur[row][col] !== prev[row][col]) return true;\n    }\n    return false;\n}\nfunction slideUp() {\n    for(var c = 0; c < size; c++){\n        var column = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var newColumn = slide(column);\n        updateColumn(c, newColumn);\n    }\n}\nfunction slideDown() {\n    for(var c = 0; c < size; c++){\n        var column = [\n            board[3][c],\n            board[2][c],\n            board[1][c],\n            board[0][c]\n        ];\n        var newColumn = slide(column).reverse();\n        updateColumn(c, newColumn);\n    }\n}\nfunction slideLeft() {\n    for(var r = 0; r < size; r++){\n        var row = board[r];\n        var newRow = slide(row);\n        board[r] = newRow;\n    }\n}\nfunction slideRight() {\n    for(var r = 0; r < size; r++){\n        var row = board[r];\n        if (slide(row) === row.reverse()) return;\n        var newRow = slide(row).reverse();\n        board[r] = newRow;\n    }\n}\nfunction updateColumn(cell, newCell) {\n    for(var row = 0; row < size; row++)board[row][cell] = newCell[row];\n}\ndocument.addEventListener(\"keydown\", function(e) {\n    var copyBoard = board.map(function(arr) {\n        return _to_consumable_array(arr);\n    });\n    e.preventDefault();\n    switch(e.code){\n        case \"KeyW\":\n            slideUp();\n            break;\n        case \"KeyS\":\n            slideDown();\n            break;\n        case \"KeyA\":\n            slideLeft();\n            break;\n        case \"KeyD\":\n            slideRight();\n            break;\n    }\n    isWin();\n    if (isLose()) lose();\n    if (hasChanged(board, copyBoard)) createRandomCell();\n    renderCells();\n    scoreMessage.innerHTML = score.toString();\n});\n\n//# sourceMappingURL=index.cdecdbfd.js.map\n","'use strict';\n\nconst gameField = document.body.querySelector('.game-field');\nconst startButton = document.body.querySelector('.button', '.start');\nconst startMessage = document.body.querySelector('.message-start');\nconst scoreMessage = document.body.querySelector('.game-score');\nconst winMessage = document.body.querySelector('.message-win');\nconst loseMessage = document.body.querySelector('.message-lose');\n\nconst size = 4;\nlet score = 0;\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction createRandomCell() {\n  const randomRow = getRandomInt(size);\n  const randomCell = getRandomInt(size);\n  const probability = 10;\n  const value = (getRandomInt(100) <= probability) ? 4 : 2;\n\n  if (board[randomRow][randomCell] === 0) {\n    board[randomRow][randomCell] = value;\n  } else {\n    createRandomCell();\n  }\n}\n\nfunction reset() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n}\n\nfunction isWin() {\n  if (board.some((arr) => arr.some((cell) => cell === 2048))) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\nfunction isLose() {\n  if (haveSpace()) {\n    return false;\n  }\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size - 1; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let c = 0; c < size; c++) {\n    for (let r = 0; r < size - 1; r++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction lose() {\n  loseMessage.classList.remove('hidden');\n}\n\nfunction haveSpace() {\n  for (let r = 0; r < size; r++) {\n    if (board[r].includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction renderCells() {\n  for (let row = 0; row < size; row++) {\n    for (let cell = 0; cell < size; cell++) {\n      const currentCell = gameField.rows[row].cells[cell];\n\n      currentCell.innerHTML = '';\n      currentCell.className = 'field-cell';\n\n      if (board[row][cell] > 0) {\n        currentCell.innerHTML = `${board[row][cell]}`;\n        currentCell.classList.add(`field-cell--${board[row][cell]}`);\n      }\n    }\n  }\n};\n\nfunction slide(array) {\n  const newArray = array.filter((element) => {\n    return element !== 0;\n  });\n\n  for (let i = 0; i < newArray.length - 1; i++) {\n    if (newArray[i] === newArray[i + 1]) {\n      newArray[i] *= 2;\n      newArray[i + 1] = 0;\n      score += newArray[i];\n    }\n  }\n\n  const filteredArray = newArray.filter((element) => {\n    return element !== 0;\n  });\n\n  const zeros = Array(array.length - filteredArray.length).fill(0);\n  const finalArray = filteredArray.concat(zeros);\n\n  return finalArray;\n};\n\nstartButton.addEventListener('click', () => {\n  reset();\n\n  startMessage.classList.add('hidden');\n  startButton.classList.replace('start', 'restart');\n  startButton.innerHTML = 'restart';\n\n  createRandomCell();\n  createRandomCell();\n  renderCells();\n});\n\nfunction hasChanged(cur, prev) {\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if (cur[row][col] !== prev[row][col]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction slideUp() {\n  for (let c = 0; c < size; c++) {\n    const column = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const newColumn = slide(column);\n\n    updateColumn(c, newColumn);\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < size; c++) {\n    const column = [board[3][c], board[2][c], board[1][c], board[0][c]];\n    const newColumn = slide(column).reverse();\n\n    updateColumn(c, newColumn);\n  }\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < size; r++) {\n    const row = board[r];\n    const newRow = slide(row);\n\n    board[r] = newRow;\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < size; r++) {\n    const row = board[r];\n\n    if (slide(row) === row.reverse()) {\n      return;\n    }\n\n    const newRow = slide(row).reverse();\n\n    board[r] = newRow;\n  }\n}\n\nfunction updateColumn(cell, newCell) {\n  for (let row = 0; row < size; row++) {\n    board[row][cell] = newCell[row];\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  const copyBoard = board.map((arr) => [...arr]);\n\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'KeyW':\n      slideUp();\n      break;\n\n    case 'KeyS':\n      slideDown();\n      break;\n\n    case 'KeyA':\n      slideLeft();\n      break;\n\n    case 'KeyD':\n      slideRight();\n      break;\n  }\n\n  isWin();\n\n  if (isLose()) {\n    lose();\n  }\n\n  if (hasChanged(board, copyBoard)) {\n    createRandomCell();\n  };\n\n  renderCells();\n  scoreMessage.innerHTML = score.toString();\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","gameField","document","body","querySelector","startButton","startMessage","scoreMessage","winMessage","loseMessage","score","board","getRandomInt","max","Math","floor","random","createRandomCell","randomRow","randomCell","value","renderCells","row","cell","currentCell","rows","cells","innerHTML","className","concat","classList","add","slide","array","newArray","filter","element","filteredArray","zeros","fill","updateColumn","newCell","addEventListener","replace","e","copyBoard","map","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","preventDefault","code","slideUp","c","newColumn","slideDown","reverse","slideLeft","r","newRow","slideRight","some","remove","isLose","haveSpace","includes","size","c1","r1","hasChanged","cur","prev","col"],"version":3,"file":"index.cdecdbfd.js.map"}